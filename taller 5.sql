--1.Crea una nueva cuenta bancaria para un cliente, asignando un número de cuenta 
--único y estableciendo un saldo inicial.
CREATE OR REPLACE PROCEDURE CREARCUENTABANCARIA (
	ID_CLIENTE INTEGER, 
	TIPO_CUENTA VARCHAR(10),
	SALDO_INICIAL NUMERIC(15, 2),
    ID_SUCURSAL INTEGER)
LANGUAGE PLPGSQL
AS $$
    -- CREACION DE VARIABLES
	DECLARE NUM_CUENTA VARCHAR(16);
	DECLARE EXISTE_CLIENTE BOOLEAN;
	DECLARE EXISTE_CUENTA BOOLEAN DEFAULT '1';

    BEGIN
	   WHILE EXISTE_CUENTA = 'S' LOOP
	    NUM_CUENTA = SUBSTR(CAST(RANDOM() AS TEXT), 3, 16);
        SELECT CASE WHEN COUNT(1) > 0 THEN 'S' ELSE 'N' END INTO EXISTE_CUENTA
          FROM CUENTASBANCARIAS  WHERE NUMERO_CUENTA = NUM_CUENTA; 
       END LOOP;

	   INSERT INTO CUENTASBANCARIAS(CLIENTE_ID, NUMERO_CUENTA, TIPO_CUENTA, SALDO, 
									 FECHA_APERTURA, ESTADO, SUCURSAL_ID)
	   VALUES(ID_CLIENTE, NUM_CUENTA, TIPO_CUENTA, SALDO_INICIAL,
				CURRENT_TIMESTAMP, 'ACTIVA', ID_SUCURSAL);
    END;
$$; 

CALL CREARCUENTABANCARIA(1, 'CORRIENTE', 5652454, 3);
--2.Actualiza la información personal de un cliente, como dirección, 
--teléfono y correo electrónico, basado en el ID del cliente.

CREATE OR REPLACE PROCEDURE ACTUALIZARCLIENTE (
	ID_CLIENTE INTEGER, 
	DIRECCION_ VARCHAR(100),
	TELEFONO_ VARCHAR(20),
    EMAIL VARCHAR(100))
LANGUAGE PLPGSQL
AS $$
    -- CREACION DE VARIABLES
	DECLARE EXISTE_CLIENTE BOOLEAN;
	DECLARE EMAIL_CORRECT INTEGER;

    BEGIN
	   UPDATE  CLIENTES SET DIRECCION = DIRECCION_ , 
	                        TELEFONO = TELEFONO_,  
							CORREO_ELECTRONICO = EMAIL
	   WHERE CLIENTE_ID = ID_CLIENTE;

    END;
$$;

CALL ACTUALIZARCLIENTE(2, 'CALLE 100 2354SDFG', '322841564', 'JUAND@GMAIL.COM');

--3.Elimina una cuenta bancaria específica del sistema, incluyendo la eliminación
--de todas las transacciones asociadas.

CREATE OR REPLACE PROCEDURE ELIMINAR_CUENTA_BANCARIA (
	ID_CUENTA INTEGER)
LANGUAGE PLPGSQL
AS $$
    -- CREACION DE VARIABLES
	DECLARE EXISTE_CUENTA BOOLEAN;
    BEGIN
	   DELETE  FROM TRANSACCIONES 
	   WHERE CUENTA_ID = ID_CUENTA;

	   DELETE  FROM PRESTAMOS 
	   WHERE CUENTA_ID = ID_CUENTA;

	   DELETE  FROM TARJETASDECREDITO 
	   WHERE CUENTA_ID = ID_CUENTA;

	   DELETE  FROM CUENTASBANCARIAS 
	   WHERE CUENTA_ID = ID_CUENTA;
    END;
$$;

CALL ELIMINAR_CUENTA_BANCARIA(2);

--4.Realiza una transferencia de fondos desde una cuenta a otra,
--asegurando que ambas cuentas se actualicen correctamente y 
--se registre la transacción.
CREATE OR REPLACE PROCEDURE TRANFERIRSALDOCUENTAS (
	ID_CUENTA_ORIGEN INTEGER, 
	ID_CUENTA_DESTINO INTEGER,
	VALOR_TRANSFERENCIA NUMERIC(15, 2),
    CONCEPTO VARCHAR(100))
LANGUAGE PLPGSQL
AS $$
    -- CREACION DE VARIABLES
	DECLARE EXISTE_CUENTA BOOLEAN;

    BEGIN
	   INSERT INTO TRANSACCIONES(CUENTA_ID, TIPO_TRANSACCION, MONTO, 
	   FECHA_TRANSACCION, DESCRIPCION) 
	   VALUES(ID_CUENTA_ORIGEN, 'TRANSFERENCIA', VALOR_TRANSFERENCIA, 
	   CURRENT_TIMESTAMP, CONCEPTO);

	   INSERT INTO TRANSACCIONES(CUENTA_ID, TIPO_TRANSACCION, MONTO,
	   FECHA_TRANSACCION, DESCRIPCION) 
	   VALUES(ID_CUENTA_DESTINO, 'EFECTIVO', VALOR_TRANSFERENCIA,
	CURRENT_TIMESTAMP, CONCEPTO);

	   UPDATE CUENTASBANCARIAS SET SALDO = SALDO - VALOR_TRANSFERENCIA
	   WHERE CUENTA_ID = ID_CUENTA_ORIGEN; 
	   UPDATE CUENTASBANCARIAS SET SALDO = SALDO + VALOR_TRANSFERENCIA 
	   WHERE CUENTA_ID = ID_CUENTA_DESTINO; 
    END;
$$;

CALL TRANFERIRSALDOCUENTAS(2, 4, 32145, 'TRANFERENCIA DEL PAGO');


--5.Registra una nueva transacción (depósito, retiro) en el sistema,
--actualizando el saldo de la cuenta asociada.
CREATE OR REPLACE PROCEDURE REGISTRARTRANSACCION(
	ID_CUENTA INTEGER, 
	VALOR_TRANSFERENCIA NUMERIC(15, 2),
	TIPO_TRANSACCION_ VARCHAR(13),
    CONCEPTO VARCHAR(100))
LANGUAGE PLPGSQL
AS $$
    -- CREACION DE VARIABLES
	DECLARE EXISTE_CUENTA BOOLEAN;
    BEGIN
	   INSERT INTO TRANSACCIONES(CUENTA_ID, TIPO_TRANSACCION, MONTO, 
	   FECHA_TRANSACCION, DESCRIPCION) 
	   VALUES(ID_CUENTA, TIPO_TRANSACCION_, VALOR_TRANSFERENCIA,
	   CURRENT_TIMESTAMP, CONCEPTO);

	   UPDATE CUENTASBANCARIAS SET SALDO = SALDO - VALOR_TRANSFERENCIA
	   WHERE CUENTA_ID = ID_CUENTA;  
    END;
$$;

CALL REGISTRARTRANSACCION(1, 50000, 'TRANSFERENCIA', 'PAGO CELULAR');


--6.Calcula el saldo total combinado de todas las cuentas bancarias 
--pertenecientes a un cliente específico.
CREATE OR REPLACE FUNCTION CALCULARSALDOTOTAL (ID_CLIENTE INTEGER)
RETURNS NUMERIC(15,2)
LANGUAGE PLPGSQL
AS $$
    -- CREACION DE VARIABLES
    DECLARE SALDO_TOTAL NUMERIC(15, 2) DEFAULT 0.00;
	DECLARE EXISTE_CLIENTE BOOLEAN;

    BEGIN
       SELECT SUM(SALDO)
	   INTO SALDO_TOTAL
       FROM CUENTASBANCARIAS 
	   WHERE CLIENTE_ID = ID_CLIENTE AND ESTADO = 'A';
       RETURN SALDO_TOTAL;
    END;
$$; 

SELECT CALCULARSALDOTOTAL(2);


--7.Genera un reporte detallado de todas las transacciones realizadas 
--en un rango de fechas específico.
CREATE OR REPLACE FUNCTION CALCULARSALDOTOTAL2 (FECHA_INICIAL 
TIMESTAMP, FECHA_FINAL TIMESTAMP)
RETURNS TABLE(TRANSACCION_ID_ INTEGER,
			 CUENTA_ID_ INTEGER,
			 TIPO_TRANSACCION_ VARCHAR,
			 MONTO_  NUMERIC,
			 FECHA_TRANSACCION_ TIMESTAMP,
			 DESCRIPCION_  VARCHAR) 
 LANGUAGE PLPGSQL
 AS $$
    DECLARE SALDO_TOTAL NUMERIC(15, 2) DEFAULT 0.00;

    BEGIN
	   RETURN QUERY
       SELECT *
       FROM TRANSACCIONES 
	   WHERE FECHA_TRANSACCION BETWEEN FECHA_INICIAL AND FECHA_FINAL;
    END;
$$; 

SELECT * FROM CALCULAR_SALDO_TOTAL('2023-01-02', '2024-12-12');
